// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: GodQQ/protocol/GodQQ.proto

package msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 检查是否成功登录
type ErrToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succ     bool   `protobuf:"varint,1,opt,name=succ,proto3" json:"succ,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	// Types that are assignable to Info:
	//
	//	*ErrToClient_Uid
	Info isErrToClient_Info `protobuf_oneof:"info"`
}

func (x *ErrToClient) Reset() {
	*x = ErrToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrToClient) ProtoMessage() {}

func (x *ErrToClient) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrToClient.ProtoReflect.Descriptor instead.
func (*ErrToClient) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{0}
}

func (x *ErrToClient) GetSucc() bool {
	if x != nil {
		return x.Succ
	}
	return false
}

func (x *ErrToClient) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (m *ErrToClient) GetInfo() isErrToClient_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *ErrToClient) GetUid() uint32 {
	if x, ok := x.GetInfo().(*ErrToClient_Uid); ok {
		return x.Uid
	}
	return 0
}

type isErrToClient_Info interface {
	isErrToClient_Info()
}

type ErrToClient_Uid struct {
	Uid uint32 `protobuf:"varint,3,opt,name=uid,proto3,oneof"`
}

func (*ErrToClient_Uid) isErrToClient_Info() {}

// 当用户上线或下线时进行广播，注册到客户端在线列表中
type OnOrOffLineMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Type     bool   `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *OnOrOffLineMsg) Reset() {
	*x = OnOrOffLineMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOrOffLineMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOrOffLineMsg) ProtoMessage() {}

func (x *OnOrOffLineMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOrOffLineMsg.ProtoReflect.Descriptor instead.
func (*OnOrOffLineMsg) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{1}
}

func (x *OnOrOffLineMsg) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OnOrOffLineMsg) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *OnOrOffLineMsg) GetType() bool {
	if x != nil {
		return x.Type
	}
	return false
}

type LoginFromClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LoginFromClient) Reset() {
	*x = LoginFromClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginFromClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginFromClient) ProtoMessage() {}

func (x *LoginFromClient) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginFromClient.ProtoReflect.Descriptor instead.
func (*LoginFromClient) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{2}
}

func (x *LoginFromClient) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// 需要发送的消息
type MessageToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                              //发送者的uid
	TargetUid uint32 `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"` //如果是私聊消息，那么发送目标的uid
	// Types that are assignable to Msg:
	//
	//	*MessageToClient_Text
	//	*MessageToClient_Data
	//	*MessageToClient_Texture
	Msg     isMessageToClient_Msg `protobuf_oneof:"msg"`
	Time    string                `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`                       //发送的时间
	MsgType uint32                `protobuf:"varint,7,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"` //发送的类型，1为文字消息，2为语音消息,3为图片消息
}

func (x *MessageToClient) Reset() {
	*x = MessageToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageToClient) ProtoMessage() {}

func (x *MessageToClient) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageToClient.ProtoReflect.Descriptor instead.
func (*MessageToClient) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{3}
}

func (x *MessageToClient) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MessageToClient) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (m *MessageToClient) GetMsg() isMessageToClient_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *MessageToClient) GetText() string {
	if x, ok := x.GetMsg().(*MessageToClient_Text); ok {
		return x.Text
	}
	return ""
}

func (x *MessageToClient) GetData() []byte {
	if x, ok := x.GetMsg().(*MessageToClient_Data); ok {
		return x.Data
	}
	return nil
}

func (x *MessageToClient) GetTexture() *TextureMsg {
	if x, ok := x.GetMsg().(*MessageToClient_Texture); ok {
		return x.Texture
	}
	return nil
}

func (x *MessageToClient) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *MessageToClient) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

type isMessageToClient_Msg interface {
	isMessageToClient_Msg()
}

type MessageToClient_Text struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type MessageToClient_Data struct {
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3,oneof"`
}

type MessageToClient_Texture struct {
	Texture *TextureMsg `protobuf:"bytes,5,opt,name=texture,proto3,oneof"`
}

func (*MessageToClient_Text) isMessageToClient_Msg() {}

func (*MessageToClient_Data) isMessageToClient_Msg() {}

func (*MessageToClient_Texture) isMessageToClient_Msg() {}

// 由客户端发送的消息
type MessageFromClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                        //如果是私聊消息，那么需要发送的uid
	MsgType uint32 `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"` //发送的类型
	// Types that are assignable to Content:
	//
	//	*MessageFromClient_Text
	//	*MessageFromClient_Data
	//	*MessageFromClient_Texture
	Content isMessageFromClient_Content `protobuf_oneof:"content"`
}

func (x *MessageFromClient) Reset() {
	*x = MessageFromClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFromClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFromClient) ProtoMessage() {}

func (x *MessageFromClient) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFromClient.ProtoReflect.Descriptor instead.
func (*MessageFromClient) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{4}
}

func (x *MessageFromClient) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MessageFromClient) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (m *MessageFromClient) GetContent() isMessageFromClient_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *MessageFromClient) GetText() string {
	if x, ok := x.GetContent().(*MessageFromClient_Text); ok {
		return x.Text
	}
	return ""
}

func (x *MessageFromClient) GetData() []byte {
	if x, ok := x.GetContent().(*MessageFromClient_Data); ok {
		return x.Data
	}
	return nil
}

func (x *MessageFromClient) GetTexture() *TextureMsg {
	if x, ok := x.GetContent().(*MessageFromClient_Texture); ok {
		return x.Texture
	}
	return nil
}

type isMessageFromClient_Content interface {
	isMessageFromClient_Content()
}

type MessageFromClient_Text struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type MessageFromClient_Data struct {
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3,oneof"`
}

type MessageFromClient_Texture struct {
	Texture *TextureMsg `protobuf:"bytes,5,opt,name=texture,proto3,oneof"` //图片数据
}

func (*MessageFromClient_Text) isMessageFromClient_Content() {}

func (*MessageFromClient_Data) isMessageFromClient_Content() {}

func (*MessageFromClient_Texture) isMessageFromClient_Content() {}

type TextureMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Format uint32 `protobuf:"varint,4,opt,name=format,proto3" json:"format,omitempty"` //texture的类型
}

func (x *TextureMsg) Reset() {
	*x = TextureMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextureMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextureMsg) ProtoMessage() {}

func (x *TextureMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextureMsg.ProtoReflect.Descriptor instead.
func (*TextureMsg) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{5}
}

func (x *TextureMsg) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TextureMsg) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TextureMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TextureMsg) GetFormat() uint32 {
	if x != nil {
		return x.Format
	}
	return 0
}

type Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName  string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserPwd   string `protobuf:"bytes,2,opt,name=user_pwd,json=userPwd,proto3" json:"user_pwd,omitempty"`
	UserEmail string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	Code      string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Register) Reset() {
	*x = Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Register) ProtoMessage() {}

func (x *Register) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Register.ProtoReflect.Descriptor instead.
func (*Register) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{6}
}

func (x *Register) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Register) GetUserPwd() string {
	if x != nil {
		return x.UserPwd
	}
	return ""
}

func (x *Register) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *Register) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// 向客户端发送所有在线的用户
type OnlineUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      []uint32 `protobuf:"varint,1,rep,packed,name=uid,proto3" json:"uid,omitempty"`                   //用户的uid列表
	UserName []string `protobuf:"bytes,2,rep,name=user_name,json=userName,proto3" json:"user_name,omitempty"` //用户名
}

func (x *OnlineUsers) Reset() {
	*x = OnlineUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineUsers) ProtoMessage() {}

func (x *OnlineUsers) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineUsers.ProtoReflect.Descriptor instead.
func (*OnlineUsers) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{7}
}

func (x *OnlineUsers) GetUid() []uint32 {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *OnlineUsers) GetUserName() []string {
	if x != nil {
		return x.UserName
	}
	return nil
}

// 客户端向服务端发送的请求分享的页码
type GetShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` //查询的页码数
	Type uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` //查询的类型，1为全局查询，2为查询自己发的share
}

func (x *GetShare) Reset() {
	*x = GetShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShare) ProtoMessage() {}

func (x *GetShare) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShare.ProtoReflect.Descriptor instead.
func (*GetShare) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{8}
}

func (x *GetShare) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetShare) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 客户端向服务端进行创建share
type CreateShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //发表者的id
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`              //发表的内容
}

func (x *CreateShare) Reset() {
	*x = CreateShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShare) ProtoMessage() {}

func (x *CreateShare) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShare.ProtoReflect.Descriptor instead.
func (*CreateShare) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{9}
}

func (x *CreateShare) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateShare) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 服务器向客户端发送的share
type SendShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTheEnd  bool     `protobuf:"varint,8,opt,name=is_the_end,json=isTheEnd,proto3" json:"is_the_end,omitempty"`         //判断是否是表中最后一个元素
	Type      uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                   //发送的类型，1为全局，2为自身查询
	HideIndex []uint32 `protobuf:"varint,2,rep,packed,name=hide_index,json=hideIndex,proto3" json:"hide_index,omitempty"` //如果数据长度大于200，发送省略数据，将省略的参数放到此列中
	Id        []uint64 `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`                                //显示当前share的id
	UserId    []uint32 `protobuf:"varint,4,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content   []string `protobuf:"bytes,6,rep,name=content,proto3" json:"content,omitempty"`
	Time      []string `protobuf:"bytes,7,rep,name=time,proto3" json:"time,omitempty"` //创建的时间
}

func (x *SendShare) Reset() {
	*x = SendShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendShare) ProtoMessage() {}

func (x *SendShare) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendShare.ProtoReflect.Descriptor instead.
func (*SendShare) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{10}
}

func (x *SendShare) GetIsTheEnd() bool {
	if x != nil {
		return x.IsTheEnd
	}
	return false
}

func (x *SendShare) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SendShare) GetHideIndex() []uint32 {
	if x != nil {
		return x.HideIndex
	}
	return nil
}

func (x *SendShare) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SendShare) GetUserId() []uint32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *SendShare) GetContent() []string {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SendShare) GetTime() []string {
	if x != nil {
		return x.Time
	}
	return nil
}

// 客户端向服务器创建评论
type CreateComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId   uint64 `protobuf:"varint,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	TargetUid uint32 `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"` //向谁进行评论，0为share
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                       //创建的评论内容
}

func (x *CreateComment) Reset() {
	*x = CreateComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateComment) ProtoMessage() {}

func (x *CreateComment) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateComment.ProtoReflect.Descriptor instead.
func (*CreateComment) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{11}
}

func (x *CreateComment) GetShareId() uint64 {
	if x != nil {
		return x.ShareId
	}
	return 0
}

func (x *CreateComment) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *CreateComment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 客户端向服务器申请获得内容详情
type GetShareDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdatedTime string `protobuf:"bytes,2,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"` //客户端向服务端发送收到的share的updated时间，如果和服务器获得的时间不同，则需要重新向客户端发送更新后的数据
	IsHidden    bool   `protobuf:"varint,3,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`         //判断客户端获得的share是否是隐藏过的
}

func (x *GetShareDetail) Reset() {
	*x = GetShareDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareDetail) ProtoMessage() {}

func (x *GetShareDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareDetail.ProtoReflect.Descriptor instead.
func (*GetShareDetail) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{12}
}

func (x *GetShareDetail) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetShareDetail) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *GetShareDetail) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

type SendShareDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist   bool   `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SendShareDetail) Reset() {
	*x = SendShareDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendShareDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendShareDetail) ProtoMessage() {}

func (x *SendShareDetail) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendShareDetail.ProtoReflect.Descriptor instead.
func (*SendShareDetail) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{13}
}

func (x *SendShareDetail) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *SendShareDetail) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 客户端向服务器申请获得评论
type GetComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Page uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"` //获得评论的位置
}

func (x *GetComment) Reset() {
	*x = GetComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComment) ProtoMessage() {}

func (x *GetComment) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComment.ProtoReflect.Descriptor instead.
func (*GetComment) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{14}
}

func (x *GetComment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetComment) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

// 向客户端发送评论
type SendComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                       //share的id，用来防止传错
	UserId      []uint32 `protobuf:"varint,2,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          //评论的用户id
	Comment     []string `protobuf:"bytes,3,rep,name=comment,proto3" json:"comment,omitempty"`                              //用户的评论
	CommentTime []string `protobuf:"bytes,4,rep,name=comment_time,json=commentTime,proto3" json:"comment_time,omitempty"`   //评论的时间
	CommentId   []uint64 `protobuf:"varint,5,rep,packed,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"` //评论的id
	IsTheEnd    bool     `protobuf:"varint,6,opt,name=is_the_end,json=isTheEnd,proto3" json:"is_the_end,omitempty"`         //判断是否是最后一个
}

func (x *SendComment) Reset() {
	*x = SendComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendComment) ProtoMessage() {}

func (x *SendComment) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendComment.ProtoReflect.Descriptor instead.
func (*SendComment) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{15}
}

func (x *SendComment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SendComment) GetUserId() []uint32 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *SendComment) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *SendComment) GetCommentTime() []string {
	if x != nil {
		return x.CommentTime
	}
	return nil
}

func (x *SendComment) GetCommentId() []uint64 {
	if x != nil {
		return x.CommentId
	}
	return nil
}

func (x *SendComment) GetIsTheEnd() bool {
	if x != nil {
		return x.IsTheEnd
	}
	return false
}

// 客户端向服务器发送一个id和名称来向服务器确认是否更换,如果没有更换则返回空
type InquiryUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *InquiryUser) Reset() {
	*x = InquiryUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InquiryUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InquiryUser) ProtoMessage() {}

func (x *InquiryUser) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InquiryUser.ProtoReflect.Descriptor instead.
func (*InquiryUser) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{16}
}

func (x *InquiryUser) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InquiryUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// 查询或者设置一个内容的like
type Liking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询或设置者的id
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 所查询的内容的id
	ContentId uint64 `protobuf:"varint,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// 当类型为1时是查询一个share的like，当类型为2时是设置一个share的like，当类型为3时是查询一个share的评论的like，当类型是4时是设置一个share的评论的like
	ContentType uint32 `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Result      bool   `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"` //返回的值或者设置的值
	Counts      uint32 `protobuf:"varint,5,opt,name=counts,proto3" json:"counts,omitempty"` //返回点赞的数量
}

func (x *Liking) Reset() {
	*x = Liking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Liking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Liking) ProtoMessage() {}

func (x *Liking) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Liking.ProtoReflect.Descriptor instead.
func (*Liking) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{17}
}

func (x *Liking) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Liking) GetContentId() uint64 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *Liking) GetContentType() uint32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *Liking) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *Liking) GetCounts() uint32 {
	if x != nil {
		return x.Counts
	}
	return 0
}

// 查询一个用户是否是自己的好友
type InquiryFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询的用户的id
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 查询的好友id
	FriendId uint32 `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
}

func (x *InquiryFriend) Reset() {
	*x = InquiryFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InquiryFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InquiryFriend) ProtoMessage() {}

func (x *InquiryFriend) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InquiryFriend.ProtoReflect.Descriptor instead.
func (*InquiryFriend) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{18}
}

func (x *InquiryFriend) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InquiryFriend) GetFriendId() uint32 {
	if x != nil {
		return x.FriendId
	}
	return 0
}

// 查询用户是否为好友的返回信息
type ResultFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 对方的id，用于判断，当id为0时代表该用户不存在
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 对方的名字
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// 返回的结果
	IsFriend bool `protobuf:"varint,3,opt,name=is_friend,json=isFriend,proto3" json:"is_friend,omitempty"`
}

func (x *ResultFriend) Reset() {
	*x = ResultFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultFriend) ProtoMessage() {}

func (x *ResultFriend) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultFriend.ProtoReflect.Descriptor instead.
func (*ResultFriend) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{19}
}

func (x *ResultFriend) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ResultFriend) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ResultFriend) GetIsFriend() bool {
	if x != nil {
		return x.IsFriend
	}
	return false
}

// 好友请求和回应的信息
type AddFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId uint32 `protobuf:"varint,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	TargetId uint32 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Type     bool   `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"` //当前消息的类型，false为对好友请求的回应，true为发送的好友请求
	Respond  bool   `protobuf:"varint,4,opt,name=respond,proto3" json:"respond,omitempty"`
	Info     string `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"` //验证信息，或者打招呼信息
}

func (x *AddFriend) Reset() {
	*x = AddFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriend) ProtoMessage() {}

func (x *AddFriend) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriend.ProtoReflect.Descriptor instead.
func (*AddFriend) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{20}
}

func (x *AddFriend) GetSourceId() uint32 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *AddFriend) GetTargetId() uint32 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *AddFriend) GetType() bool {
	if x != nil {
		return x.Type
	}
	return false
}

func (x *AddFriend) GetRespond() bool {
	if x != nil {
		return x.Respond
	}
	return false
}

func (x *AddFriend) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// 获得好友列表
type GetFriendsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []uint32 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *GetFriendsList) Reset() {
	*x = GetFriendsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsList) ProtoMessage() {}

func (x *GetFriendsList) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsList.ProtoReflect.Descriptor instead.
func (*GetFriendsList) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{21}
}

func (x *GetFriendsList) GetUserIds() []uint32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// 获得视频信息列表
type GetVideoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` //查询的页数，即当前客户端发送的最小的id，服务器寻找更小的id
	Type uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` //查询的类型，1为按照时间查询
}

func (x *GetVideoList) Reset() {
	*x = GetVideoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoList) ProtoMessage() {}

func (x *GetVideoList) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoList.ProtoReflect.Descriptor instead.
func (*GetVideoList) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{22}
}

func (x *GetVideoList) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetVideoList) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 服务器返回的视频信息
type SendVideoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId          []uint32  `protobuf:"varint,1,rep,packed,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	VideoLen         []float64 `protobuf:"fixed64,2,rep,packed,name=video_len,json=videoLen,proto3" json:"video_len,omitempty"`
	VideoPlayTime    []uint32  `protobuf:"varint,3,rep,packed,name=video_play_time,json=videoPlayTime,proto3" json:"video_play_time,omitempty"`
	VideoName        []string  `protobuf:"bytes,4,rep,name=video_name,json=videoName,proto3" json:"video_name,omitempty"`
	VideoDescription []string  `protobuf:"bytes,5,rep,name=video_description,json=videoDescription,proto3" json:"video_description,omitempty"`
	VideoCreateTime  []string  `protobuf:"bytes,6,rep,name=video_create_time,json=videoCreateTime,proto3" json:"video_create_time,omitempty"`
	IsLast           bool      `protobuf:"varint,7,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"` //判断是否是最后一个
}

func (x *SendVideoList) Reset() {
	*x = SendVideoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVideoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVideoList) ProtoMessage() {}

func (x *SendVideoList) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVideoList.ProtoReflect.Descriptor instead.
func (*SendVideoList) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{23}
}

func (x *SendVideoList) GetVideoId() []uint32 {
	if x != nil {
		return x.VideoId
	}
	return nil
}

func (x *SendVideoList) GetVideoLen() []float64 {
	if x != nil {
		return x.VideoLen
	}
	return nil
}

func (x *SendVideoList) GetVideoPlayTime() []uint32 {
	if x != nil {
		return x.VideoPlayTime
	}
	return nil
}

func (x *SendVideoList) GetVideoName() []string {
	if x != nil {
		return x.VideoName
	}
	return nil
}

func (x *SendVideoList) GetVideoDescription() []string {
	if x != nil {
		return x.VideoDescription
	}
	return nil
}

func (x *SendVideoList) GetVideoCreateTime() []string {
	if x != nil {
		return x.VideoCreateTime
	}
	return nil
}

func (x *SendVideoList) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

// 请求视频节点
type VideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartPoint uint32 `protobuf:"varint,2,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty"`
}

func (x *VideoRequest) Reset() {
	*x = VideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoRequest) ProtoMessage() {}

func (x *VideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoRequest.ProtoReflect.Descriptor instead.
func (*VideoRequest) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{24}
}

func (x *VideoRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VideoRequest) GetStartPoint() uint32 {
	if x != nil {
		return x.StartPoint
	}
	return 0
}

// 返回视频节点
type VideoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	VideoPoint uint32 `protobuf:"varint,2,opt,name=video_point,json=videoPoint,proto3" json:"video_point,omitempty"`
}

func (x *VideoData) Reset() {
	*x = VideoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoData) ProtoMessage() {}

func (x *VideoData) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoData.ProtoReflect.Descriptor instead.
func (*VideoData) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{25}
}

func (x *VideoData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VideoData) GetVideoPoint() uint32 {
	if x != nil {
		return x.VideoPoint
	}
	return 0
}

// 文件的请求信息
type UploadList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId []uint64 `protobuf:"varint,1,rep,packed,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *UploadList) Reset() {
	*x = UploadList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadList) ProtoMessage() {}

func (x *UploadList) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadList.ProtoReflect.Descriptor instead.
func (*UploadList) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{26}
}

func (x *UploadList) GetFileId() []uint64 {
	if x != nil {
		return x.FileId
	}
	return nil
}

// 大文件上传的请求信息
type UploadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5      string `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`                            //文件的md5信息
	FileLen  uint64 `protobuf:"varint,2,opt,name=file_len,json=fileLen,proto3" json:"file_len,omitempty"`    //文件的大小
	FileName string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`  //文件的名称
	ClientId uint32 `protobuf:"varint,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` //在客户端中的对应的ID，用于确定对应关系
	FileId   uint64 `protobuf:"varint,6,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`       //用于判断是否是续传
}

func (x *UploadReq) Reset() {
	*x = UploadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadReq) ProtoMessage() {}

func (x *UploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadReq.ProtoReflect.Descriptor instead.
func (*UploadReq) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{27}
}

func (x *UploadReq) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *UploadReq) GetFileLen() uint64 {
	if x != nil {
		return x.FileLen
	}
	return 0
}

func (x *UploadReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadReq) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *UploadReq) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

// 文件上传的区块
type UploadChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk  uint64 `protobuf:"varint,1,opt,name=chunk,proto3" json:"chunk,omitempty"`                 //当前文件的区块
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                    //当前区块的内容
	FileId uint64 `protobuf:"varint,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"` //当前文件在文件上传服务中的id
}

func (x *UploadChunk) Reset() {
	*x = UploadChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunk) ProtoMessage() {}

func (x *UploadChunk) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunk.ProtoReflect.Descriptor instead.
func (*UploadChunk) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{28}
}

func (x *UploadChunk) GetChunk() uint64 {
	if x != nil {
		return x.Chunk
	}
	return 0
}

func (x *UploadChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadChunk) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

// 客户端与服务器之间交互的文件上传的信息
type UploadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                   //传递信息的类型，1为暂停，2为终止,3为完成，0为服务器返回的开始信息
	FileId   uint64 `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"` //传递的文件的id
	ClientId uint32 `protobuf:"varint,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *UploadInfo) Reset() {
	*x = UploadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadInfo) ProtoMessage() {}

func (x *UploadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadInfo.ProtoReflect.Descriptor instead.
func (*UploadInfo) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{29}
}

func (x *UploadInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UploadInfo) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *UploadInfo) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

// 获取已经自己已经上传的文件列表
type UploadedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId      []uint64 `protobuf:"varint,1,rep,packed,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileLen     []uint64 `protobuf:"varint,2,rep,packed,name=file_len,json=fileLen,proto3" json:"file_len,omitempty"`
	FileName    []string `protobuf:"bytes,3,rep,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	CreatedTime []string `protobuf:"bytes,4,rep,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
}

func (x *UploadedList) Reset() {
	*x = UploadedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedList) ProtoMessage() {}

func (x *UploadedList) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedList.ProtoReflect.Descriptor instead.
func (*UploadedList) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{30}
}

func (x *UploadedList) GetFileId() []uint64 {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *UploadedList) GetFileLen() []uint64 {
	if x != nil {
		return x.FileLen
	}
	return nil
}

func (x *UploadedList) GetFileName() []string {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *UploadedList) GetCreatedTime() []string {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

// 请求分享一个文件
type RequestShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId uint64 `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *RequestShareFile) Reset() {
	*x = RequestShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestShareFile) ProtoMessage() {}

func (x *RequestShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestShareFile.ProtoReflect.Descriptor instead.
func (*RequestShareFile) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{31}
}

func (x *RequestShareFile) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

// 请求分享后返回的分享id
type RequestShareFileRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId uint64 `protobuf:"varint,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
}

func (x *RequestShareFileRsp) Reset() {
	*x = RequestShareFileRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestShareFileRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestShareFileRsp) ProtoMessage() {}

func (x *RequestShareFileRsp) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestShareFileRsp.ProtoReflect.Descriptor instead.
func (*RequestShareFileRsp) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{32}
}

func (x *RequestShareFileRsp) GetShareId() uint64 {
	if x != nil {
		return x.ShareId
	}
	return 0
}

// 获得的分享列表
type ShareList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId      []uint64 `protobuf:"varint,1,rep,packed,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileLen     []uint64 `protobuf:"varint,2,rep,packed,name=file_len,json=fileLen,proto3" json:"file_len,omitempty"`
	FileName    []string `protobuf:"bytes,3,rep,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	CreatedTime []string `protobuf:"bytes,4,rep,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	ShareId     []uint64 `protobuf:"varint,5,rep,packed,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
}

func (x *ShareList) Reset() {
	*x = ShareList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareList) ProtoMessage() {}

func (x *ShareList) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareList.ProtoReflect.Descriptor instead.
func (*ShareList) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{33}
}

func (x *ShareList) GetFileId() []uint64 {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *ShareList) GetFileLen() []uint64 {
	if x != nil {
		return x.FileLen
	}
	return nil
}

func (x *ShareList) GetFileName() []string {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *ShareList) GetCreatedTime() []string {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *ShareList) GetShareId() []uint64 {
	if x != nil {
		return x.ShareId
	}
	return nil
}

// 请求获得分享id对应的文件信息
type GetShareFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId uint64 `protobuf:"varint,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
}

func (x *GetShareFileInfo) Reset() {
	*x = GetShareFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareFileInfo) ProtoMessage() {}

func (x *GetShareFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareFileInfo.ProtoReflect.Descriptor instead.
func (*GetShareFileInfo) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{34}
}

func (x *GetShareFileInfo) GetShareId() uint64 {
	if x != nil {
		return x.ShareId
	}
	return 0
}

// 获得分享id对应的文件信息
type GetShareFileInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId  uint64 `protobuf:"varint,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	FileId   uint64 `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileLen  uint64 `protobuf:"varint,4,opt,name=file_len,json=fileLen,proto3" json:"file_len,omitempty"`
	FileMd5  string `protobuf:"bytes,5,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`
}

func (x *GetShareFileInfoRsp) Reset() {
	*x = GetShareFileInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareFileInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareFileInfoRsp) ProtoMessage() {}

func (x *GetShareFileInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareFileInfoRsp.ProtoReflect.Descriptor instead.
func (*GetShareFileInfoRsp) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{35}
}

func (x *GetShareFileInfoRsp) GetShareId() uint64 {
	if x != nil {
		return x.ShareId
	}
	return 0
}

func (x *GetShareFileInfoRsp) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *GetShareFileInfoRsp) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *GetShareFileInfoRsp) GetFileLen() uint64 {
	if x != nil {
		return x.FileLen
	}
	return 0
}

func (x *GetShareFileInfoRsp) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

// 请求一个下载的内容
type DownloadChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId  uint64 `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ChunkId uint64 `protobuf:"varint,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DownloadChunk) Reset() {
	*x = DownloadChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunk) ProtoMessage() {}

func (x *DownloadChunk) ProtoReflect() protoreflect.Message {
	mi := &file_GodQQ_protocol_GodQQ_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunk.ProtoReflect.Descriptor instead.
func (*DownloadChunk) Descriptor() ([]byte, []int) {
	return file_GodQQ_protocol_GodQQ_proto_rawDescGZIP(), []int{36}
}

func (x *DownloadChunk) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *DownloadChunk) GetChunkId() uint64 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *DownloadChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_GodQQ_protocol_GodQQ_proto protoreflect.FileDescriptor

var file_GodQQ_protocol_GodQQ_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x47, 0x6f, 0x64, 0x51, 0x51, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x47, 0x6f, 0x64, 0x51, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x0b,
	0x45, 0x72, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x75, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x75, 0x63, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x42,
	0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x0e, 0x4f, 0x6e, 0x4f, 0x72, 0x4f,
	0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x23, 0x0a, 0x0f,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x73, 0x67,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x75, 0x0a, 0x08,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x77,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x50, 0x77, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x32, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x68, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x69, 0x64,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x60, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x22, 0x41, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x68, 0x65, 0x45, 0x6e, 0x64, 0x22, 0x43, 0x0a, 0x0b,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x0d, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x61,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x36, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x80, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x01,
	0x0a, 0x09, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x0b, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a,
	0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x64, 0x35, 0x22, 0x57, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0x5a,
	0x04, 0x2f, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_GodQQ_protocol_GodQQ_proto_rawDescOnce sync.Once
	file_GodQQ_protocol_GodQQ_proto_rawDescData = file_GodQQ_protocol_GodQQ_proto_rawDesc
)

func file_GodQQ_protocol_GodQQ_proto_rawDescGZIP() []byte {
	file_GodQQ_protocol_GodQQ_proto_rawDescOnce.Do(func() {
		file_GodQQ_protocol_GodQQ_proto_rawDescData = protoimpl.X.CompressGZIP(file_GodQQ_protocol_GodQQ_proto_rawDescData)
	})
	return file_GodQQ_protocol_GodQQ_proto_rawDescData
}

var file_GodQQ_protocol_GodQQ_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_GodQQ_protocol_GodQQ_proto_goTypes = []interface{}{
	(*ErrToClient)(nil),         // 0: ErrToClient
	(*OnOrOffLineMsg)(nil),      // 1: OnOrOffLineMsg
	(*LoginFromClient)(nil),     // 2: LoginFromClient
	(*MessageToClient)(nil),     // 3: MessageToClient
	(*MessageFromClient)(nil),   // 4: MessageFromClient
	(*TextureMsg)(nil),          // 5: TextureMsg
	(*Register)(nil),            // 6: Register
	(*OnlineUsers)(nil),         // 7: OnlineUsers
	(*GetShare)(nil),            // 8: GetShare
	(*CreateShare)(nil),         // 9: CreateShare
	(*SendShare)(nil),           // 10: SendShare
	(*CreateComment)(nil),       // 11: CreateComment
	(*GetShareDetail)(nil),      // 12: GetShareDetail
	(*SendShareDetail)(nil),     // 13: SendShareDetail
	(*GetComment)(nil),          // 14: GetComment
	(*SendComment)(nil),         // 15: SendComment
	(*InquiryUser)(nil),         // 16: InquiryUser
	(*Liking)(nil),              // 17: Liking
	(*InquiryFriend)(nil),       // 18: InquiryFriend
	(*ResultFriend)(nil),        // 19: ResultFriend
	(*AddFriend)(nil),           // 20: AddFriend
	(*GetFriendsList)(nil),      // 21: GetFriendsList
	(*GetVideoList)(nil),        // 22: GetVideoList
	(*SendVideoList)(nil),       // 23: SendVideoList
	(*VideoRequest)(nil),        // 24: VideoRequest
	(*VideoData)(nil),           // 25: VideoData
	(*UploadList)(nil),          // 26: UploadList
	(*UploadReq)(nil),           // 27: UploadReq
	(*UploadChunk)(nil),         // 28: UploadChunk
	(*UploadInfo)(nil),          // 29: UploadInfo
	(*UploadedList)(nil),        // 30: UploadedList
	(*RequestShareFile)(nil),    // 31: RequestShareFile
	(*RequestShareFileRsp)(nil), // 32: RequestShareFileRsp
	(*ShareList)(nil),           // 33: ShareList
	(*GetShareFileInfo)(nil),    // 34: GetShareFileInfo
	(*GetShareFileInfoRsp)(nil), // 35: GetShareFileInfoRsp
	(*DownloadChunk)(nil),       // 36: DownloadChunk
}
var file_GodQQ_protocol_GodQQ_proto_depIdxs = []int32{
	5, // 0: MessageToClient.texture:type_name -> TextureMsg
	5, // 1: MessageFromClient.texture:type_name -> TextureMsg
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_GodQQ_protocol_GodQQ_proto_init() }
func file_GodQQ_protocol_GodQQ_proto_init() {
	if File_GodQQ_protocol_GodQQ_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GodQQ_protocol_GodQQ_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOrOffLineMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginFromClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFromClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextureMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendShareDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InquiryUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Liking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InquiryFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVideoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendVideoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestShareFileRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareFileInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GodQQ_protocol_GodQQ_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_GodQQ_protocol_GodQQ_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ErrToClient_Uid)(nil),
	}
	file_GodQQ_protocol_GodQQ_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*MessageToClient_Text)(nil),
		(*MessageToClient_Data)(nil),
		(*MessageToClient_Texture)(nil),
	}
	file_GodQQ_protocol_GodQQ_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*MessageFromClient_Text)(nil),
		(*MessageFromClient_Data)(nil),
		(*MessageFromClient_Texture)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GodQQ_protocol_GodQQ_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GodQQ_protocol_GodQQ_proto_goTypes,
		DependencyIndexes: file_GodQQ_protocol_GodQQ_proto_depIdxs,
		MessageInfos:      file_GodQQ_protocol_GodQQ_proto_msgTypes,
	}.Build()
	File_GodQQ_protocol_GodQQ_proto = out.File
	file_GodQQ_protocol_GodQQ_proto_rawDesc = nil
	file_GodQQ_protocol_GodQQ_proto_goTypes = nil
	file_GodQQ_protocol_GodQQ_proto_depIdxs = nil
}
