syntax="proto3";

option go_package = "/msg";

//检查是否成功登录
message ErrToClient{
  bool succ = 1;
  string errorMsg = 2;
  oneof info{
    uint32 uid = 3;
  }
}

//当用户上线或下线时进行广播，注册到客户端在线列表中
message OnOrOffLineMsg{
  uint32 uid = 1;
  string user_name = 2;
  bool type = 3;
}

message LoginFromClient{
  string key = 1;
}

//需要发送的消息
message MessageToClient{
  uint32 uid = 1;//发送者的uid
  uint32 target_uid = 2;//如果是私聊消息，那么发送目标的uid
  oneof msg{
    string text = 3;
    bytes data = 4;
    TextureMsg texture = 5;
  }
  string time = 6;//发送的时间
  uint32 msg_type = 7;//发送的类型，1为文字消息，2为语音消息,3为图片消息
}

//由客户端发送的消息
message MessageFromClient{
  uint32 uid = 1;//如果是私聊消息，那么需要发送的uid
  uint32 msg_type = 2;//发送的类型
  oneof content{
    string text = 3;
    bytes data = 4;
    TextureMsg texture = 5;//图片数据
  }//发送的内容
}

message TextureMsg{
  uint32 width = 1;
  uint32 height = 2;
  bytes data = 3;
  uint32 format = 4;//texture的类型
}

message Register{
  string user_name = 1;
  string user_pwd = 2;
  string user_email = 3;
  string code = 4;
}

//向客户端发送所有在线的用户
message OnlineUsers{
  repeated uint32 uid = 1;//用户的uid列表
  repeated string user_name = 2;//用户名
}

//客户端向服务端发送的请求分享的页码
message GetShare{
  uint32 page = 1;//查询的页码数
  uint32 type = 2;//查询的类型，1为全局查询，2为查询自己发的share
}

//客户端向服务端进行创建share
message CreateShare{
  uint32 user_id = 1;//发表者的id
  string content = 3;//发表的内容
}

//服务器向客户端发送的share
message SendShare{
  bool is_the_end = 8;//判断是否是表中最后一个元素
  uint32 type = 1;//发送的类型，1为全局，2为自身查询
  repeated uint32 hide_index = 2;//如果数据长度大于200，发送省略数据，将省略的参数放到此列中
  repeated uint64 id = 3;//显示当前share的id
  repeated uint32 user_id = 4;
  repeated string content = 6;
  repeated string time = 7;//创建的时间
}

//客户端向服务器创建评论
message CreateComment{
  uint64 share_id = 1;
  uint32 target_uid = 2;//向谁进行评论，0为share
  string content = 3;//创建的评论内容
}

// 客户端向服务器申请获得内容详情
message GetShareDetail{
  uint64 id = 1;
  string updated_time = 2;//客户端向服务端发送收到的share的updated时间，如果和服务器获得的时间不同，则需要重新向客户端发送更新后的数据
  bool is_hidden = 3;//判断客户端获得的share是否是隐藏过的
}

message SendShareDetail{
  bool exist = 1;
  string content = 2;
}

//客户端向服务器申请获得评论
message GetComment{
  uint64 id = 1;
  uint64 page = 2;//获得评论的位置
}

//向客户端发送评论
message SendComment{
  uint64 id = 1;//share的id，用来防止传错
  repeated uint32 user_id = 2;//评论的用户id
  repeated string comment = 3;//用户的评论
  repeated string comment_time = 4;//评论的时间
  repeated uint64 comment_id = 5;//评论的id
  bool is_the_end = 6;//判断是否是最后一个
}

//客户端向服务器发送一个id和名称来向服务器确认是否更换,如果没有更换则返回空
message InquiryUser{
  uint32 user_id = 1;
  string user_name = 2;
}

//查询或者设置一个内容的like
message Liking{
  //查询或设置者的id
  uint32 user_id = 1;
  //所查询的内容的id
  uint64 content_id = 2;
  //当类型为1时是查询一个share的like，当类型为2时是设置一个share的like，当类型为3时是查询一个share的评论的like，当类型是4时是设置一个share的评论的like
  uint32 content_type = 3;
  bool result = 4;//返回的值或者设置的值
  uint32 counts = 5;//返回点赞的数量
}

//查询一个用户是否是自己的好友
message InquiryFriend{
  //查询的用户的id
  uint32 user_id = 1;
  //查询的好友id
  uint32 friend_id = 2;
}

//查询用户是否为好友的返回信息
message ResultFriend{
  //对方的id，用于判断，当id为0时代表该用户不存在
  uint32 user_id = 1;
  //对方的名字
  string user_name = 2;
  //返回的结果
  bool is_friend = 3;
}

//好友请求和回应的信息
message AddFriend{
  uint32 source_id = 1;
  uint32 target_id = 2;
  bool type = 3;//当前消息的类型，false为对好友请求的回应，true为发送的好友请求
  bool respond = 4;
  string info = 5;//验证信息，或者打招呼信息
}

//获得好友列表
message GetFriendsList{
  repeated uint32 user_ids = 1;
}

//获得视频信息列表
message GetVideoList{
  uint32 page = 1;//查询的页数，即当前客户端发送的最小的id，服务器寻找更小的id
  uint32 type = 2;//查询的类型，1为按照时间查询
}

//服务器返回的视频信息
message SendVideoList{
  repeated uint32 video_id = 1;
  repeated double video_len = 2;
  repeated uint32 video_play_time = 3;
  repeated string video_name = 4;
  repeated string video_description = 5;
  repeated string video_create_time = 6;
  bool is_last = 7;//判断是否是最后一个
}

//请求视频节点
message VideoRequest{
  uint32 id = 1;
  uint32 start_point = 2;
}

//返回视频节点
message VideoData{
  bytes data = 1;
  uint32 video_point = 2;
}

//大文件上传的请求信息
message UploadReq{
  string md5 = 1;//文件的md5信息
  uint64 file_len = 2;//文件的大小
  string file_type = 3;//文件的类型,即文件的后缀
  string file_name = 4;//文件的名称
  uint32 client_id = 5;//在客户端中的对应的ID，用于确定对应关系
  uint64 file_id = 6;//用于判断是否是续传
}

//文件上传的区块
message UploadChunk{
  uint64 chunk = 1;//当前文件的区块
  bytes data = 2;//当前区块的内容
  uint64 file_id = 3;//当前文件在文件上传服务中的id
}

//客户端与服务器之间交互的文件上传的信息
message UploadInfo{
  uint32 type = 1;//传递信息的类型，1为暂停，2为终止,3为完成，0为服务器返回的开始信息
  uint64 file_id = 2;//传递的文件的id
  uint32 client_id = 5;
}

